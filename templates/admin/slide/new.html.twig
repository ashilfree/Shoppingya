{# @var ea \EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext #}
{# @var entity \EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto #}
{% extends ea.templatePath('layout') %}
{% form_theme new_form with ea.crud.formThemes only %}

{% trans_default_domain ea.i18n.translationDomain %}

{% block body_id 'ea-new-' ~ entity.name ~ '-' ~ entity.primaryKeyValue %}
{% block body_class 'ea-new ea-new-' ~ entity.name %}

{% block configured_head_contents %}
    {{ parent() }}
    {% for htmlContent in new_form.vars.ea_crud_form.assets.headContents %}
        {{ htmlContent|raw }}
    {% endfor %}
{% endblock %}

{% block configured_stylesheets %}
    {{ parent() }}
    {% for css_asset in new_form.vars.ea_crud_form.assets.cssFiles %}
        <link rel="stylesheet" href="{{ asset(css_asset) }}">
    {% endfor %}
{% endblock %}

{% block configured_javascripts %}
    {{ parent() }}
    {% for js_asset in new_form.vars.ea_crud_form.assets.jsFiles %}
        <script src="{{ asset(js_asset) }}"></script>
    {% endfor %}
{% endblock %}
    {% block head_javascript %}
        <!-- BEGIN PAGE LEVEL STYLES -->
        <link rel="stylesheet" type="text/css" href="{{ asset('assets/admin/assets/css/scrollspyNav.css') }}">
        <link rel="stylesheet" type="text/css" href="{{ asset('assets/admin/plugins/select2/select2.min.css') }}">
        <link href="{{ asset('assets/admin/plugins/file-upload/file-upload-with-preview.min.css') }}" rel="stylesheet" type="text/css" />
        <script src="{{ asset('assets/admin/plugins/file-upload/file-upload-with-preview.min.js') }}"></script>
        <!-- END PAGE LEVEL STYLES -->
    {% endblock head_javascript %}
{% block content_title %}
    {%- apply spaceless -%}
        {% set default_title = ea.crud.defaultPageTitle|trans(ea.i18n.translationParameters, 'EasyAdminBundle') %}
        {{ ea.crud.customPageTitle is null ? default_title|raw : ea.crud.customPageTitle|trans(ea.i18n.translationParameters)|raw }}
    {%- endapply -%}
{% endblock %}

{% block page_actions %}
    {% for action in entity.actions %}
        {{ include(action.templatePath, { action: action }, with_context = false) }}
    {% endfor %}
{% endblock %}

{% block main %}
    {% block new_form %}
<div class="col-xl-12 col-lg-12 col-sm-12  layout-spacing">
        {{ form_start(new_form) }}
    <div class="row mb-4">
        <div class="col">
            {{ form_row(new_form.title, {'attr': {'class': 'form-control', 'placeholder':'Title'}}) }}
        </div>
        <div class="col">
            {{ form_row(new_form.titleAr, {'attr': {'class': 'form-control text-right', 'placeholder':'العنوان'}}) }}
        </div>
    </div>
    <div class="row mb-4">
        <div class="col">
            {{ form_row(new_form.content, {'attr': {'class': 'form-control', 'placeholder':'Content'}}) }}
        </div>
        <div class="col">
            {{ form_row(new_form.contentAr, {'attr': {'class': 'form-control text-right', 'placeholder':'المحتوى'}}) }}
        </div>
    </div>
    <div class="row mb-4">
        <div class="col">
            {{ form_row(new_form.btnTitle, {'attr': {'class': 'form-control', 'placeholder':'Button Title'}}) }}
        </div>
        <div class="col">
            {{ form_row(new_form.btnTitleAr, {'attr': {'class': 'form-control text-right', 'placeholder':'عنوان الزر'}}) }}
        </div>
    </div>
    <div class="row mb-4">
        <div class="col">
            {{ form_widget(new_form.btnUrl, {'attr': {'placeholder':'Button Url'}}) }}
        </div>
    </div>
        {{ form_end(new_form) }}
</div>
{#        {{ form(new_form) }}#}
    {% endblock new_form %}
{% endblock %}

{% block body_javascript %}
    {{ parent() }}

    <script type="text/javascript">
        $(function() {
            {#$('.ea-new-form').areYouSure({ 'message': '{{ 'form.are_you_sure'|trans({}, 'EasyAdminBundle')|e('js') }}' });#}

            const entityForm = document.querySelector('form.ea-new-form');
            const inputFieldsSelector = 'input,select,textarea';

            // Adding visual feedback for invalid fields: any ".form-group" with invalid fields
            // receives "has-error" class. The class is removed on click on the ".form-group"
            // itself to support custom/complex fields.
            entityForm.addEventListener('submit', function() {
                entityForm.querySelectorAll(inputFieldsSelector).forEach(function (input) {
                    if (!input.validity.valid) {
                        const formGroup = input.closest('div.form-group');

                        formGroup.classList.add('has-error');

                        formGroup.addEventListener('click', function onFormGroupClick() {
                            formGroup.classList.remove('has-error');
                            formGroup.removeEventListener('click', onFormGroupClick);
                        });
                    }
                });
            });

            // forms with tabs require some special treatment for errors. The problem
            // is when the field with errors is included in a tab not currently visible.
            // Browser shows this error "An invalid form control with name='...' is not focusable."
            // So, the user clicks on Submit button, the form is not submitted and the error
            // is not displayed. This JavaScript code ensures that each tab shows a badge with
            // the number of errors in it.
            entityForm.addEventListener('submit', function() {
                const formTabPanes = entityForm.querySelectorAll('.tab-pane');
                if (0 === formTabPanes.length) {
                    return;
                }

                let firstNavTabItemWithError = null;

                formTabPanes.forEach(function (tabPane) {
                    let tabPaneNumErrors = 0;
                    tabPane.querySelectorAll(inputFieldsSelector).forEach(function (input) {
                        if (!input.validity.valid) {
                            tabPaneNumErrors++;
                        }
                    });

                    let navTabItem = entityForm.querySelector('.nav-item a[href="#' + tabPane.id + '"]');
                    let existingErrorBadge = navTabItem.querySelector('span.badge.badge-danger');
                    if (null !== existingErrorBadge) {
                        navTabItem.removeChild(existingErrorBadge);
                    }

                    if (tabPaneNumErrors > 0) {
                        let newErrorBadge = document.createElement('span');
                        newErrorBadge.classList.add('badge', 'badge-danger');
                        newErrorBadge.title = 'form.tab.error_badge_title';
                        newErrorBadge.textContent = tabPaneNumErrors;

                        navTabItem.appendChild(newErrorBadge);

                        if (null === firstNavTabItemWithError) {
                            firstNavTabItemWithError = navTabItem;
                        }
                    }
                });

                if (firstNavTabItemWithError) {
                    firstNavTabItemWithError.click();
                }
            });

            // prevent multiple form submissions to avoid creating duplicated entities
            entityForm.addEventListener('submit', function() {
                // this timeout is needed to include the disabled button into the submitted form
                setTimeout(function() {
                    const submitButtons = entityForm.querySelectorAll('[type="submit"]');
                    submitButtons.forEach(function(button) {
                        button.setAttribute('disabled', 'disabled');
                    });
                }, 1);
            }, false);
        });
    </script>

    {{ include('@EasyAdmin/crud/includes/_select2_widget.html.twig') }}
    <script src="{{ asset('assets/admin/assets/js/scrollspyNav.js') }}"></script>
    <script src="{{ asset('assets/admin/plugins/select2/select2.min.js') }}"></script>
    <script src="{{ asset('assets/admin/plugins/select2/custom-select2.js') }}"></script>
{#    <script src="{{ asset('assets/admin/plugins/file-upload/file-upload-with-preview.min.js') }}"></script>#}
{#    <script type="text/javascript">#}
{#      var firstUpload = new FileUploadWithPreview('myFirstImage')#}
{#    </script>#}
{% endblock %}
